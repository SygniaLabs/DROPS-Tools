---
projectLink: https://github.com/dafthack/DomainPasswordSpray
name: DomainPasswordSpray
languages:
  - name: PS
    prefix: ''

params:

  - name: Target
    type: label

  - name: Domain
    type: text
    description: The domain to spray against
    template: "-Domain {0}"
    default: ''
    optional: false

  - name: UserList
    type: text
    description: Optional UserList parameter. This will be generated automatically if not specified
    template: "-UserList {0}"
    default: 'userlist.txt'
    optional: true
    selected: false

  - name: Filter
    type: text
    description: Custom LDAP filter for users list fetch
    template: "-Filter {0}"
    default: '(description=*admin*)'
    optional: true
    selected: false

  - name: Passwords
    type: label

  - name: Password
    type: text
    description: A single password that will be used to perform the password spray
    template: "-Password {0}"
    default: 'Winter2022'
    optional: true
    selected: true

  - name: PasswordList
    type: text
    description: A list of passwords one per line to use for the password spray (Be very careful not to lockout accounts).
    template: "-PasswordList {0}"
    default: 'passwords.txt'
    optional: true
    selected: false

  - name: Throttling
    type: label

  - name: Fudge
    type: text
    description: Extra wait time between each round of tests (seconds)
    template: "-Fudge {0}"
    default: '60'
    optional: true
    selectd: false

  - name: Output
    type: label

  - name: OutFile
    type: text
    description: A file to output the results to
    template: "-OutFile {0}"
    default: 'sprayed-out.txt'
    optional: true
    selected: false

  - name: Flags
    type: label

  - name: UsernameAsPassword
    type: flag
    description: For each user, will try that user's name as their password
    value: '-UsernameAsPassword'
    optional: true
    selected: false

  - name: Force
    type: flag
    description: Forces the spray to continue and doesn't prompt for confirmation
    value: '-Force'
    optional: true
    selected: false

  - name: RemoveDisabled
    type: flag
    description: Attempts to remove disabled accounts from the userlist
    value: '-RemoveDisabled'
    optional: true
    selected: false

  - name: RemovePotentialLockouts
    type: flag
    description: Removes accounts within 1 attempt of locking out
    value: '-RemovePotentialLockouts'
    optional: true
    selected: false

  - name: Quiet
    type: flag
    description: Less output to work better over C2
    value: '-Quiet'
    optional: true
    selected: false  

sections:

  - name: Gather a userlist from the domain, optionally excluding disabled accounts and accounts that are about to be lockd out
    labels: ['Recon']
    mitre: 'T1078.002'
    verb: 'Get-DomainUserList'
    required_flags: [Domain]
    optional_flags: [RemoveDisabled, RemovePotentialLockouts, Filter]

  - name: Generate a list of users from the current user's domain and attempt to authenticate using each username and a specified password
    labels: ['Credential Access']
    mitre: 'T1110.003'
    verb: 'Invoke-DomainPasswordSpray'
    required_flags: [Password]
    optional_flags: [PasswordList, Filter, Domain, OutFile, Quiet, Fudge, Force, UsernameAsPassword]

  - name: Iterate over a users list and attempt to authenticate using passwords from a file, one at a time. It will automatically attempt to detect the domain's lockout window and restrict sprays attempts during each window.
    labels: ['Credential Access']
    mitre: 'T1110.003'
    verb: 'Invoke-DomainPasswordSpray'
    required_flags: [UserList, Domain, PasswordList]
    optional_flags: [Filter, OutFile, Quiet, Fudge, Force, UsernameAsPassword]